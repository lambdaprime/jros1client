/*
 * Copyright 2021 msgmonster project
 * 
 * Website: https://github.com/pinorobotics/msgmonster
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * msgmonster autogenerated Message class for jrosclient
 * 
 * Generated for ROS msg file: geometry_msgs/Twist
 */

package id.jrosmessages.geometry_msgs;


import java.util.Objects;

import id.jrosmessages.Message;
import id.jrosmessages.MessageMetadata;
import id.kineticstreamer.annotations.Streamed;
import id.xfunction.XJson;

/**
 * Definition for geometry_msgs/Twist
 * This expresses velocity in free space broken into its linear and angular parts.
 */
@MessageMetadata(
    type = TwistMessage.NAME,
    md5sum = "7b067cfe31b410bffd4e416af2c10eb0")
public class TwistMessage implements Message {
   
   static final String NAME = "geometry_msgs/Twist";

   @Streamed
   public Vector3Message linear = new Vector3Message();
   
   @Streamed
   public Vector3Message angular = new Vector3Message();
   
   public TwistMessage withLinear(Vector3Message linear) {
       this.linear = linear;
       return this;
   }
   
   public TwistMessage withAngular(Vector3Message angular) {
       this.angular = angular;
       return this;
   }
   
   @Override
   public int hashCode() {
       return Objects.hash(
           linear,
           angular
       );
   }
   
   @Override
   public boolean equals(Object obj) {
       var other = (TwistMessage) obj;
       return
           Objects.equals(linear, other.linear) &&
           Objects.equals(angular, other.angular)
       ;
   }
   
   @Override
   public String toString() {
       return XJson.asString(
           "linear", linear,
           "angular", angular
       );
   }
   
}
